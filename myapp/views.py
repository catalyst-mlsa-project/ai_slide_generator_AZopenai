import os
import base64
from openai import AzureOpenAI
import tempfile
from django.shortcuts import render
from django.http import FileResponse
from .forms import SlideGenerationForm
from .models import PowerPointTemplate
from pptx import Presentation
from pptx.util import Inches, Pt
from PIL import Image
import requests
from io import BytesIO
from dotenv import load_dotenv

load_dotenv()

# Azure OpenAI Configuration
endpoint = os.getenv("ENDPOINT_URL", "https://wertjkhliukyut0385770571.openai.azure.com/")
deployment = os.getenv("DEPLOYMENT_NAME", "gpt-4o-mini")
subscription_key = os.getenv("AZURE_OPENAI_API_KEY", "REPLACE_WITH_YOUR_KEY_VALUE_HERE")

# Initialize Azure OpenAI Service client with key-based authentication
client = AzureOpenAI(
    azure_endpoint=endpoint,
    api_key=subscription_key,
    api_version="2024-05-01-preview",
)

def generate_ppt(prompt, template_path):
    try:
        # Prepare the chat prompt for GPT-4
        chat_prompt = [
            {"role": "system", "content": "You are an AI assistant that helps people create PowerPoint presentations."},
            {"role": "user", "content": f"Generate content for PowerPoint slides about: {prompt}"}
        ]

        # Generate the completion using GPT-4 for slide content
        completion = client.chat.completions.create(
            model=deployment,
            messages=chat_prompt,
            max_tokens=800,
            temperature=0.7,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0
        )

        # Correct way to access the response from completion
        choices = completion.choices
        slide_contents = choices[0].message.content.strip().split("\n\n")  # Split content into slides

        # Generate images for slides using DALLÂ·E 3
        image_paths = []
        max_images = 5  # Limit the number of images to 5
        for i, slide_content in enumerate(slide_contents[:max_images]):
            try:
                result = client.images.generate(
                    model="dall-e-3",  # the name of your DALL-E 3 deployment
                    prompt=f"Create an image related to: {slide_content}",
                    n=1
                )

                image_url = result.data[0].url

                # Download the generated image
                image = Image.open(BytesIO(requests.get(image_url).content))
                image_path = f"generated_image_{i}.png"
                image.save(image_path)
                image_paths.append(image_path)
            except Exception as img_error:
                print(f"Error generating image for slide {i+1}: {img_error}")
                print(f"Slide content: {slide_content}")  # Log the problematic prompt
                image_paths.append(None)  # Append None to indicate failure

        # Create PowerPoint presentation
        prs = Presentation(template_path)

        # Add Title Slide
        title_slide = prs.slides.add_slide(prs.slide_layouts[0])  # Title slide layout
        title_slide.shapes.title.text = f"Presentation on {prompt}"
        subtitle = title_slide.placeholders[1] if len(title_slide.placeholders) > 1 else None
        if subtitle:
            subtitle.text = "Generated by AI"

        # Add Content Slides
        for i, (slide_content, image_path) in enumerate(zip(slide_contents, image_paths)):
            try:
                slide = prs.slides.add_slide(prs.slide_layouts[1])  # Content slide layout
                title_placeholder = slide.shapes.title if slide.shapes.title else slide.shapes.add_textbox(Inches(1), Inches(0.5), Inches(8.5), Inches(1))
                title_placeholder.text = f"Slide {i+1}"
                
                # Add text box for slide content
                txBox = slide.shapes.add_textbox(Inches(1), Inches(1.5), Inches(8.5), Inches(5))
                tf = txBox.text_frame
                p = tf.add_paragraph()
                p.text = slide_content
                p.font.size = Pt(18)

                # Add image to the slide if available
                if image_path and os.path.exists(image_path):
                    left = Inches(1)
                    top = Inches(4)
                    height = Inches(3)
                    slide.shapes.add_picture(image_path, left, top, height=height)
            except Exception as slide_error:
                print(f"Error adding content to slide {i+1}: {slide_error}")

        # Save the presentation to a temporary file
        output_path = tempfile.mktemp(suffix=".pptx")
        prs.save(output_path)

        # Cleanup generated images after PowerPoint is created
        for image_path in image_paths:
            if image_path and os.path.exists(image_path):
                os.remove(image_path)

        return output_path
    except Exception as e:
        print(f"Error generating PowerPoint: {e}")
        return None

def ai_ppt_maker(request):
    if request.method == "POST":
        form = SlideGenerationForm(request.POST, request.FILES)
        if form.is_valid():
            prompt = form.cleaned_data['prompt']
            selected_template_id = form.cleaned_data.get('template')
            custom_template = request.FILES.get('custom_template')

            # Validate prompt
            if not prompt:
                return render(request, 'error.html', {'message': 'Prompt cannot be empty.'})

            # Determine template path
            if custom_template:
                template_path = custom_template.temporary_file_path()
            elif selected_template_id:
                try:
                    selected_template = PowerPointTemplate.objects.get(id=selected_template_id)
                    template_path = selected_template.template_file.path
                except PowerPointTemplate.DoesNotExist:
                    return render(request, 'error.html', {'message': 'Selected template not found.'})
            else:
                return render(request, 'error.html', {'message': 'No template selected or uploaded.'})

            ppt_path = generate_ppt(prompt, template_path)
            if ppt_path:
                with open(ppt_path, 'rb') as ppt_file:
                    return FileResponse(ppt_file, as_attachment=True, filename="AI_Presentation.pptx")
            else:
                return render(request, 'error.html', {'message': 'An error occurred while generating the PowerPoint.'})
    else:
        form = SlideGenerationForm()

    templates = PowerPointTemplate.objects.all()
    return render(request, 'ai_ppt_maker.html', {'form': form, 'templates': templates})
